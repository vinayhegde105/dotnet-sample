resources:
- repo: self
  fetchDepth: 1
pool:
  vmImage: ubuntu-20.04
trigger:
- main
variables:
  TargetFramework: 'netcoreapp3.1'
  BuildConfiguration: 'Release'
  DockerImageName: 'nextgendev/clouddemo'
stages :
  - stage: BUILDandPUSH
    displayName: BUILDandPUSH
    jobs:
    - job: Apply
      continueOnError: false
      timeoutInMinutes: 0
      steps:
      - task: DotNetCoreCLI@2
        displayName: Publish
        inputs:
          projects: 'applications/clouddemo/netcore/CloudDemo.MvcCore.sln'
          publishWebProjects: false
          command: publish
          arguments: '--configuration $(BuildConfiguration) --framework=$(TargetFramework)'
          zipAfterPublish: false
          modifyOutputPath: false
      - task: CmdLine@1
        displayName: 'Lock image version in deployment.yaml'
        inputs:
          filename: /bin/bash
          arguments: '-c "awk ''{gsub(\"CLOUDDEMO_IMAGE\", \"gcr.io/$(DockerImageName):$(Build.BuildId)\", $0); print}'' applications/clouddemo/netcore/deployment.yaml > $(build.artifactstagingdirectory)/deployment.yaml"'
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact'
        inputs:
          PathtoPublish: '$(build.artifactstagingdirectory)'
      - task: Docker@2
        displayName: 'Login to Container Registry'
        inputs:
          command: login
          containerRegistry: 'gcr-tutorial'
      - task: Docker@2
        displayName: 'Build and push image'
        inputs:
          Dockerfile: 'applications/clouddemo/netcore/Dockerfile'
          command: buildAndPush
          repository: '$(DockerImageName)'

  - stage: Deploy
    displayName: Deploy
    dependsOn: BUILDandPUSH
    jobs:
    - deployment: Deploy
      displayName: Deploy job
      pool:
        vmImage: 'ubuntu-latest'
      environment: 'pipeline'
      strategy:
        runOnce:
          deploy:
            steps:
            # - task: DownloadPipelineArtifact@2
            #   inputs:
            #     artifactName: 'manifests'
            #     downloadPath: '$(System.ArtifactsDirectory)/manifests'

            - task: KubernetesManifest@0
              displayName: deploy
              inputs:
                kubernetesServiceConnection: 'azure-pipelines-cicd-dev'
                namespace: default
                manifests: manifest/drop/deployment.yaml